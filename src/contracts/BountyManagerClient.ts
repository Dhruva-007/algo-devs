/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BountyManager","desc":"","methods":[{"name":"createApplication","args":[{"name":"maintainerAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createBounty","args":[{"name":"BountyConfig","type":"(uint64,string,string,address,string,uint64,uint64,uint64,uint64)","struct":"BountyConfig"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteBounty","args":[{"name":"BountyID","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateBounty","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"BountyConfig":[{"name":"bountyId","type":"uint64"},{"name":"bountyName","type":"string"},{"name":"bountyCategory","type":"string"},{"name":"bountyCreator","type":"address"},{"name":"bountyImage","type":"string"},{"name":"bountyCost","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"submissionCount","type":"uint64"},{"name":"bountyAppId","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"maintainerAddress":{"key":"bWFpbnRhaW5lckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"totalBounties":{"key":"dG90YWxCb3VudGllcw==","keyType":"AVMBytes","valueType":"uint64"},"lastBountyID":{"key":"bGFzdEJvdW50eUlE","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"allBountys":{"keyType":"uint64","valueType":"BountyConfig"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\BountyManager.algo.ts:19","pc":[0]},{"teal":2,"source":"contracts\\BountyManager.algo.ts:19","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\BountyManager.algo.ts:19","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]},{"teal":15,"source":"contracts\\BountyManager.algo.ts:19","pc":[35,36]},{"teal":16,"source":"contracts\\BountyManager.algo.ts:19","pc":[37]},{"teal":17,"source":"contracts\\BountyManager.algo.ts:19","pc":[38,39]},{"teal":18,"source":"contracts\\BountyManager.algo.ts:19","pc":[40]},{"teal":19,"source":"contracts\\BountyManager.algo.ts:19","pc":[41,42]},{"teal":20,"source":"contracts\\BountyManager.algo.ts:19","pc":[43]},{"teal":21,"source":"contracts\\BountyManager.algo.ts:19","pc":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]},{"teal":25,"source":"contracts\\BountyManager.algo.ts:19","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[70]},{"teal":30,"source":"contracts\\BountyManager.algo.ts:30","pc":[71,72,73]},{"teal":31,"source":"contracts\\BountyManager.algo.ts:30","pc":[74]},{"teal":32,"source":"contracts\\BountyManager.algo.ts:30","pc":[75]},{"teal":33,"source":"contracts\\BountyManager.algo.ts:30","pc":[76,77]},{"teal":34,"source":"contracts\\BountyManager.algo.ts:30","pc":[78]},{"teal":37,"source":"contracts\\BountyManager.algo.ts:30","errorMessage":"argument 0 (maintainerAddress) for createApplication must be a address","pc":[79]},{"teal":40,"source":"contracts\\BountyManager.algo.ts:30","pc":[80,81,82]},{"teal":41,"source":"contracts\\BountyManager.algo.ts:30","pc":[83]},{"teal":42,"source":"contracts\\BountyManager.algo.ts:30","pc":[84]},{"teal":46,"source":"contracts\\BountyManager.algo.ts:30","pc":[85,86,87]},{"teal":50,"source":"contracts\\BountyManager.algo.ts:31","pc":[88]},{"teal":51,"source":"contracts\\BountyManager.algo.ts:31","pc":[89,90]},{"teal":52,"source":"contracts\\BountyManager.algo.ts:31","pc":[91]},{"teal":56,"source":"contracts\\BountyManager.algo.ts:32","pc":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110]},{"teal":57,"source":"contracts\\BountyManager.algo.ts:32","pc":[111,112]},{"teal":58,"source":"contracts\\BountyManager.algo.ts:32","pc":[113]},{"teal":62,"source":"contracts\\BountyManager.algo.ts:33","pc":[114]},{"teal":63,"source":"contracts\\BountyManager.algo.ts:33","pc":[115]},{"teal":64,"source":"contracts\\BountyManager.algo.ts:33","pc":[116]},{"teal":65,"source":"contracts\\BountyManager.algo.ts:30","pc":[117]},{"teal":70,"source":"contracts\\BountyManager.algo.ts:36","pc":[118,119,120]},{"teal":73,"source":"contracts\\BountyManager.algo.ts:36","pc":[121,122,123]},{"teal":74,"source":"contracts\\BountyManager.algo.ts:36","pc":[124]},{"teal":75,"source":"contracts\\BountyManager.algo.ts:36","pc":[125]},{"teal":79,"source":"contracts\\BountyManager.algo.ts:36","pc":[126,127,128]},{"teal":82,"source":"contracts\\BountyManager.algo.ts:36","pc":[129]},{"teal":97,"source":"contracts\\BountyManager.algo.ts:37","pc":[130]},{"teal":98,"source":"contracts\\BountyManager.algo.ts:37","pc":[131]},{"teal":99,"source":"contracts\\BountyManager.algo.ts:37","pc":[132,133,134,135]},{"teal":100,"source":"contracts\\BountyManager.algo.ts:38","pc":[136]},{"teal":101,"source":"contracts\\BountyManager.algo.ts:38","pc":[137]},{"teal":102,"source":"contracts\\BountyManager.algo.ts:38","pc":[138]},{"teal":103,"source":"contracts\\BountyManager.algo.ts:38","pc":[139,140,141]},{"teal":104,"source":"contracts\\BountyManager.algo.ts:39","pc":[142,143]},{"teal":105,"source":"contracts\\BountyManager.algo.ts:39","pc":[144,145]},{"teal":106,"source":"contracts\\BountyManager.algo.ts:39","pc":[146,147]},{"teal":107,"source":"contracts\\BountyManager.algo.ts:39","pc":[148,149]},{"teal":108,"source":"contracts\\BountyManager.algo.ts:39","pc":[150,151]},{"teal":109,"source":"contracts\\BountyManager.algo.ts:39","pc":[152,153]},{"teal":110,"source":"contracts\\BountyManager.algo.ts:39","pc":[154]},{"teal":111,"source":"contracts\\BountyManager.algo.ts:39","pc":[155]},{"teal":112,"source":"contracts\\BountyManager.algo.ts:39","pc":[156,157]},{"teal":113,"source":"contracts\\BountyManager.algo.ts:39","pc":[158]},{"teal":114,"source":"contracts\\BountyManager.algo.ts:39","pc":[159]},{"teal":115,"source":"contracts\\BountyManager.algo.ts:39","pc":[160]},{"teal":116,"source":"contracts\\BountyManager.algo.ts:39","pc":[161]},{"teal":117,"source":"contracts\\BountyManager.algo.ts:39","pc":[162]},{"teal":118,"source":"contracts\\BountyManager.algo.ts:39","pc":[163]},{"teal":119,"source":"contracts\\BountyManager.algo.ts:39","pc":[164]},{"teal":120,"source":"contracts\\BountyManager.algo.ts:39","pc":[165,166,167]},{"teal":121,"source":"contracts\\BountyManager.algo.ts:39","pc":[168]},{"teal":122,"source":"contracts\\BountyManager.algo.ts:39","pc":[169]},{"teal":123,"source":"contracts\\BountyManager.algo.ts:39","pc":[170]},{"teal":124,"source":"contracts\\BountyManager.algo.ts:39","pc":[171,172,173]},{"teal":125,"source":"contracts\\BountyManager.algo.ts:39","pc":[174]},{"teal":126,"source":"contracts\\BountyManager.algo.ts:39","pc":[175]},{"teal":127,"source":"contracts\\BountyManager.algo.ts:39","pc":[176,177,178]},{"teal":128,"source":"contracts\\BountyManager.algo.ts:40","pc":[179,180]},{"teal":129,"source":"contracts\\BountyManager.algo.ts:40","pc":[181,182]},{"teal":130,"source":"contracts\\BountyManager.algo.ts:40","pc":[183,184]},{"teal":131,"source":"contracts\\BountyManager.algo.ts:40","pc":[185,186]},{"teal":132,"source":"contracts\\BountyManager.algo.ts:40","pc":[187,188]},{"teal":133,"source":"contracts\\BountyManager.algo.ts:40","pc":[189,190]},{"teal":134,"source":"contracts\\BountyManager.algo.ts:40","pc":[191]},{"teal":135,"source":"contracts\\BountyManager.algo.ts:40","pc":[192]},{"teal":136,"source":"contracts\\BountyManager.algo.ts:40","pc":[193,194]},{"teal":137,"source":"contracts\\BountyManager.algo.ts:40","pc":[195]},{"teal":138,"source":"contracts\\BountyManager.algo.ts:40","pc":[196]},{"teal":139,"source":"contracts\\BountyManager.algo.ts:40","pc":[197]},{"teal":140,"source":"contracts\\BountyManager.algo.ts:40","pc":[198]},{"teal":141,"source":"contracts\\BountyManager.algo.ts:40","pc":[199]},{"teal":142,"source":"contracts\\BountyManager.algo.ts:40","pc":[200]},{"teal":143,"source":"contracts\\BountyManager.algo.ts:40","pc":[201]},{"teal":144,"source":"contracts\\BountyManager.algo.ts:40","pc":[202,203,204]},{"teal":145,"source":"contracts\\BountyManager.algo.ts:40","pc":[205]},{"teal":146,"source":"contracts\\BountyManager.algo.ts:40","pc":[206]},{"teal":147,"source":"contracts\\BountyManager.algo.ts:40","pc":[207]},{"teal":148,"source":"contracts\\BountyManager.algo.ts:40","pc":[208,209,210]},{"teal":149,"source":"contracts\\BountyManager.algo.ts:40","pc":[211]},{"teal":150,"source":"contracts\\BountyManager.algo.ts:40","pc":[212]},{"teal":151,"source":"contracts\\BountyManager.algo.ts:40","pc":[213,214,215]},{"teal":152,"source":"contracts\\BountyManager.algo.ts:41","pc":[216,217]},{"teal":153,"source":"contracts\\BountyManager.algo.ts:41","pc":[218,219]},{"teal":154,"source":"contracts\\BountyManager.algo.ts:41","pc":[220,221]},{"teal":155,"source":"contracts\\BountyManager.algo.ts:41","pc":[222,223,224]},{"teal":156,"source":"contracts\\BountyManager.algo.ts:41","pc":[225,226,227]},{"teal":157,"source":"contracts\\BountyManager.algo.ts:42","pc":[228,229]},{"teal":158,"source":"contracts\\BountyManager.algo.ts:42","pc":[230,231]},{"teal":159,"source":"contracts\\BountyManager.algo.ts:42","pc":[232,233]},{"teal":160,"source":"contracts\\BountyManager.algo.ts:42","pc":[234,235]},{"teal":161,"source":"contracts\\BountyManager.algo.ts:42","pc":[236,237]},{"teal":162,"source":"contracts\\BountyManager.algo.ts:42","pc":[238,239]},{"teal":163,"source":"contracts\\BountyManager.algo.ts:42","pc":[240]},{"teal":164,"source":"contracts\\BountyManager.algo.ts:42","pc":[241]},{"teal":165,"source":"contracts\\BountyManager.algo.ts:42","pc":[242,243]},{"teal":166,"source":"contracts\\BountyManager.algo.ts:42","pc":[244]},{"teal":167,"source":"contracts\\BountyManager.algo.ts:42","pc":[245]},{"teal":168,"source":"contracts\\BountyManager.algo.ts:42","pc":[246]},{"teal":169,"source":"contracts\\BountyManager.algo.ts:42","pc":[247]},{"teal":170,"source":"contracts\\BountyManager.algo.ts:42","pc":[248]},{"teal":171,"source":"contracts\\BountyManager.algo.ts:42","pc":[249]},{"teal":172,"source":"contracts\\BountyManager.algo.ts:42","pc":[250]},{"teal":173,"source":"contracts\\BountyManager.algo.ts:42","pc":[251,252,253]},{"teal":174,"source":"contracts\\BountyManager.algo.ts:42","pc":[254]},{"teal":175,"source":"contracts\\BountyManager.algo.ts:42","pc":[255]},{"teal":176,"source":"contracts\\BountyManager.algo.ts:42","pc":[256]},{"teal":177,"source":"contracts\\BountyManager.algo.ts:42","pc":[257,258,259]},{"teal":178,"source":"contracts\\BountyManager.algo.ts:42","pc":[260]},{"teal":179,"source":"contracts\\BountyManager.algo.ts:42","pc":[261]},{"teal":180,"source":"contracts\\BountyManager.algo.ts:42","pc":[262,263,264]},{"teal":181,"source":"contracts\\BountyManager.algo.ts:43","pc":[265,266]},{"teal":182,"source":"contracts\\BountyManager.algo.ts:43","pc":[267,268]},{"teal":183,"source":"contracts\\BountyManager.algo.ts:43","pc":[269,270]},{"teal":184,"source":"contracts\\BountyManager.algo.ts:43","pc":[271,272,273]},{"teal":185,"source":"contracts\\BountyManager.algo.ts:43","pc":[274]},{"teal":186,"source":"contracts\\BountyManager.algo.ts:43","pc":[275]},{"teal":187,"source":"contracts\\BountyManager.algo.ts:43","pc":[276,277,278]},{"teal":188,"source":"contracts\\BountyManager.algo.ts:44","pc":[279,280]},{"teal":189,"source":"contracts\\BountyManager.algo.ts:44","pc":[281,282]},{"teal":190,"source":"contracts\\BountyManager.algo.ts:44","pc":[283,284]},{"teal":191,"source":"contracts\\BountyManager.algo.ts:44","pc":[285,286,287]},{"teal":192,"source":"contracts\\BountyManager.algo.ts:44","pc":[288]},{"teal":193,"source":"contracts\\BountyManager.algo.ts:44","pc":[289]},{"teal":194,"source":"contracts\\BountyManager.algo.ts:44","pc":[290,291,292]},{"teal":195,"source":"contracts\\BountyManager.algo.ts:45","pc":[293,294]},{"teal":196,"source":"contracts\\BountyManager.algo.ts:45","pc":[295,296]},{"teal":197,"source":"contracts\\BountyManager.algo.ts:45","pc":[297,298]},{"teal":198,"source":"contracts\\BountyManager.algo.ts:45","pc":[299,300,301]},{"teal":199,"source":"contracts\\BountyManager.algo.ts:45","pc":[302]},{"teal":200,"source":"contracts\\BountyManager.algo.ts:45","pc":[303]},{"teal":201,"source":"contracts\\BountyManager.algo.ts:45","pc":[304,305,306]},{"teal":202,"source":"contracts\\BountyManager.algo.ts:46","pc":[307,308]},{"teal":203,"source":"contracts\\BountyManager.algo.ts:46","pc":[309,310]},{"teal":204,"source":"contracts\\BountyManager.algo.ts:46","pc":[311,312]},{"teal":205,"source":"contracts\\BountyManager.algo.ts:46","pc":[313,314,315]},{"teal":206,"source":"contracts\\BountyManager.algo.ts:46","pc":[316]},{"teal":207,"source":"contracts\\BountyManager.algo.ts:46","pc":[317]},{"teal":208,"source":"contracts\\BountyManager.algo.ts:46","pc":[318,319,320]},{"teal":209,"source":"contracts\\BountyManager.algo.ts:37","pc":[321]},{"teal":210,"source":"contracts\\BountyManager.algo.ts:37","pc":[322]},{"teal":211,"source":"contracts\\BountyManager.algo.ts:37","pc":[323,324]},{"teal":215,"source":"contracts\\BountyManager.algo.ts:50","pc":[325]},{"teal":216,"source":"contracts\\BountyManager.algo.ts:50","pc":[326]},{"teal":217,"source":"contracts\\BountyManager.algo.ts:50","pc":[327]},{"teal":218,"source":"contracts\\BountyManager.algo.ts:50","pc":[328]},{"teal":219,"source":"contracts\\BountyManager.algo.ts:50","pc":[329]},{"teal":220,"source":"contracts\\BountyManager.algo.ts:50","pc":[330]},{"teal":221,"source":"contracts\\BountyManager.algo.ts:50","pc":[331,332]},{"teal":222,"source":"contracts\\BountyManager.algo.ts:50","pc":[333]},{"teal":226,"source":"contracts\\BountyManager.algo.ts:51","pc":[334]},{"teal":227,"source":"contracts\\BountyManager.algo.ts:51","pc":[335]},{"teal":228,"source":"contracts\\BountyManager.algo.ts:51","pc":[336]},{"teal":229,"source":"contracts\\BountyManager.algo.ts:51","pc":[337]},{"teal":230,"source":"contracts\\BountyManager.algo.ts:51","pc":[338]},{"teal":231,"source":"contracts\\BountyManager.algo.ts:51","pc":[339]},{"teal":232,"source":"contracts\\BountyManager.algo.ts:51","pc":[340]},{"teal":236,"source":"contracts\\BountyManager.algo.ts:52","pc":[341]},{"teal":237,"source":"contracts\\BountyManager.algo.ts:52","pc":[342]},{"teal":238,"source":"contracts\\BountyManager.algo.ts:52","pc":[343]},{"teal":239,"source":"contracts\\BountyManager.algo.ts:52","pc":[344]},{"teal":240,"source":"contracts\\BountyManager.algo.ts:52","pc":[345]},{"teal":241,"source":"contracts\\BountyManager.algo.ts:52","pc":[346]},{"teal":242,"source":"contracts\\BountyManager.algo.ts:52","pc":[347]},{"teal":243,"source":"contracts\\BountyManager.algo.ts:36","pc":[348]},{"teal":248,"source":"contracts\\BountyManager.algo.ts:57","pc":[349,350,351]},{"teal":249,"source":"contracts\\BountyManager.algo.ts:57","pc":[352]},{"teal":252,"source":"contracts\\BountyManager.algo.ts:57","pc":[353,354,355]},{"teal":253,"source":"contracts\\BountyManager.algo.ts:57","pc":[356]},{"teal":254,"source":"contracts\\BountyManager.algo.ts:57","pc":[357]},{"teal":258,"source":"contracts\\BountyManager.algo.ts:57","pc":[358,359,360]},{"teal":262,"source":"contracts\\BountyManager.algo.ts:59","pc":[361,362]},{"teal":263,"source":"contracts\\BountyManager.algo.ts:59","pc":[363,364,365]},{"teal":264,"source":"contracts\\BountyManager.algo.ts:59","pc":[366,367]},{"teal":265,"source":"contracts\\BountyManager.algo.ts:59","pc":[368]},{"teal":266,"source":"contracts\\BountyManager.algo.ts:59","pc":[369]},{"teal":267,"source":"contracts\\BountyManager.algo.ts:59","pc":[370]},{"teal":271,"source":"contracts\\BountyManager.algo.ts:62","pc":[371,372]},{"teal":272,"source":"contracts\\BountyManager.algo.ts:62","pc":[373]},{"teal":273,"source":"contracts\\BountyManager.algo.ts:62","pc":[374]},{"teal":274,"source":"contracts\\BountyManager.algo.ts:57","pc":[375]},{"teal":279,"source":"contracts\\BountyManager.algo.ts:70","pc":[376,377,378]},{"teal":280,"source":"contracts\\BountyManager.algo.ts:70","pc":[379]},{"teal":281,"source":"contracts\\BountyManager.algo.ts:70","pc":[380]},{"teal":285,"source":"contracts\\BountyManager.algo.ts:70","pc":[381,382,383]},{"teal":286,"source":"contracts\\BountyManager.algo.ts:70","pc":[384]},{"teal":289,"source":"contracts\\BountyManager.algo.ts:19","pc":[385,386,387,388,389,390]},{"teal":290,"source":"contracts\\BountyManager.algo.ts:19","pc":[391,392,393]},{"teal":291,"source":"contracts\\BountyManager.algo.ts:19","pc":[394,395,396,397]},{"teal":294,"source":"contracts\\BountyManager.algo.ts:19","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[398]},{"teal":297,"source":"contracts\\BountyManager.algo.ts:19","pc":[399,400,401,402,403,404]},{"teal":298,"source":"contracts\\BountyManager.algo.ts:19","pc":[405,406,407,408,409,410]},{"teal":299,"source":"contracts\\BountyManager.algo.ts:19","pc":[411,412,413,414,415,416]},{"teal":300,"source":"contracts\\BountyManager.algo.ts:19","pc":[417,418,419]},{"teal":301,"source":"contracts\\BountyManager.algo.ts:19","pc":[420,421,422,423,424,425,426,427]},{"teal":304,"source":"contracts\\BountyManager.algo.ts:19","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[428]},{"teal":307,"source":"contracts\\BountyManager.algo.ts:19","pc":[429,430,431]},{"teal":308,"source":"contracts\\BountyManager.algo.ts:19","pc":[432,433]},{"teal":309,"source":"contracts\\BountyManager.algo.ts:19","pc":[434,435]},{"teal":310,"source":"contracts\\BountyManager.algo.ts:19","pc":[436]},{"teal":311,"source":"contracts\\BountyManager.algo.ts:19","pc":[437,438]},{"teal":312,"source":"contracts\\BountyManager.algo.ts:19","pc":[439,440]},{"teal":313,"source":"contracts\\BountyManager.algo.ts:19","pc":[441]},{"teal":316,"source":"contracts\\BountyManager.algo.ts:19","pc":[442,443,444]},{"teal":317,"source":"contracts\\BountyManager.algo.ts:19","pc":[445,446]},{"teal":318,"source":"contracts\\BountyManager.algo.ts:19","pc":[447,448]},{"teal":319,"source":"contracts\\BountyManager.algo.ts:19","pc":[449]},{"teal":320,"source":"contracts\\BountyManager.algo.ts:19","pc":[450,451]},{"teal":321,"source":"contracts\\BountyManager.algo.ts:19","pc":[452,453]},{"teal":322,"source":"contracts\\BountyManager.algo.ts:19","pc":[454]},{"teal":323,"source":"contracts\\BountyManager.algo.ts:19","pc":[455]},{"teal":324,"source":"contracts\\BountyManager.algo.ts:19","pc":[456,457]},{"teal":325,"source":"contracts\\BountyManager.algo.ts:19","pc":[458]},{"teal":326,"source":"contracts\\BountyManager.algo.ts:19","pc":[459]},{"teal":327,"source":"contracts\\BountyManager.algo.ts:19","pc":[460]},{"teal":328,"source":"contracts\\BountyManager.algo.ts:19","pc":[461,462,463]},{"teal":329,"source":"contracts\\BountyManager.algo.ts:19","pc":[464,465]},{"teal":330,"source":"contracts\\BountyManager.algo.ts:19","pc":[466,467]},{"teal":331,"source":"contracts\\BountyManager.algo.ts:19","pc":[468]},{"teal":332,"source":"contracts\\BountyManager.algo.ts:19","pc":[469]},{"teal":333,"source":"contracts\\BountyManager.algo.ts:19","pc":[470,471]},{"teal":334,"source":"contracts\\BountyManager.algo.ts:19","pc":[472,473]},{"teal":335,"source":"contracts\\BountyManager.algo.ts:19","pc":[474,475]},{"teal":336,"source":"contracts\\BountyManager.algo.ts:19","pc":[476,477]},{"teal":337,"source":"contracts\\BountyManager.algo.ts:19","pc":[478]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQImAwxsYXN0Qm91bnR5SUQNdG90YWxCb3VudGllcwAxGBSBBgsxGQiNDAFJAAAAAAAAAAAAAAE7AAAAAAAAAAAAAAA2GgFJFYEgEkSIAAIiQ4oBACmBAGeAEW1haW50YWluZXJBZGRyZXNzi/9nKCJniTYaAYgAAiJDigEAKioqgAIATihkFogBH4v/Nf+BCDT/NP9PAllJNP9MWSILIwhYVwIASRUWVwYCTFCIAQeL/zX/gQo0/zT/TwJZSTT/TFkiCyMIWFcCAEkVFlcGAkxQiADii/81/zT/VwwgiADJi/81/4EsNP80/08CWUk0/0xZIgsjCFhXAgBJFRZXBgJMUIgAsYv/Nf80/1cuCBcWiACWi/81/zT/VzYIFxaIAIiL/zX/NP9XPggXFogAeov/Nf80/1dGCBcWiABsSFCMAChkFkm8SIsAvyhkIggoTGcpZCIIKUxniTYaAReIAAIiQ4oBADEANjIAcgdIEkSL/xa8iYgAAiJDigAAiYAE0yS+pDYaAI4B/rkAgASFWWidgAS5RV6mgAQ7Ls4aNhoAjgP+yv+x/8wAigQDi/yL/1CL/Yv+iYoEA4v8i/5QjPyL/0kVi/4XCBZXBgKM/ov9TFCM/Yv8i/2L/ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type BountyConfig = {
  bountyId: bigint,
  bountyName: string,
  bountyCategory: string,
  bountyCreator: string,
  bountyImage: string,
  bountyCost: bigint,
  endTime: bigint,
  submissionCount: bigint,
  bountyAppId: bigint
}


/**
 * Converts the ABI tuple representation of a BountyConfig to the struct representation
 */
export function BountyConfigFromTuple(abiTuple: [bigint, string, string, string, string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.BountyConfig, APP_SPEC.structs) as BountyConfig
}

/**
 * The argument types for the BountyManager contract
 */
export type BountyManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      maintainerAddress: string
    }
    'createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void': {
      bountyConfig: BountyConfig
    }
    'deleteBounty(uint64)void': {
      bountyId: bigint | number
    }
    'updateBounty()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [maintainerAddress: string]
    'createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void': [bountyConfig: BountyConfig]
    'deleteBounty(uint64)void': [bountyId: bigint | number]
    'updateBounty()void': []
  }
}

/**
 * The return type for each method
 */
export type BountyManagerReturns = {
  'createApplication(address)void': void
  'createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void': void
  'deleteBounty(uint64)void': void
  'updateBounty()void': void
}

/**
 * Defines the types of available calls and state of the BountyManager smart contract.
 */
export type BountyManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: BountyManagerArgs['obj']['createApplication(address)void']
      argsTuple: BountyManagerArgs['tuple']['createApplication(address)void']
      returns: BountyManagerReturns['createApplication(address)void']
    }>
    & Record<'createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void' | 'createBounty', {
      argsObj: BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']
      argsTuple: BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']
      returns: BountyManagerReturns['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']
    }>
    & Record<'deleteBounty(uint64)void' | 'deleteBounty', {
      argsObj: BountyManagerArgs['obj']['deleteBounty(uint64)void']
      argsTuple: BountyManagerArgs['tuple']['deleteBounty(uint64)void']
      returns: BountyManagerReturns['deleteBounty(uint64)void']
    }>
    & Record<'updateBounty()void' | 'updateBounty', {
      argsObj: BountyManagerArgs['obj']['updateBounty()void']
      argsTuple: BountyManagerArgs['tuple']['updateBounty()void']
      returns: BountyManagerReturns['updateBounty()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        maintainerAddress: string
        totalBounties: bigint
        lastBountyId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        allBountys: Map<bigint | number, BountyConfig>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BountyManagerSignatures = keyof BountyManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BountyManagerNonVoidMethodSignatures = keyof BountyManagerTypes['methods'] extends infer T ? T extends keyof BountyManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BountyManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BountyManagerSignatures> = BountyManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BountyManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BountyManagerSignatures> = BountyManagerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BountyManagerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BountyManagerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BountyManagerCreateCallParams =
  | Expand<CallParams<BountyManagerArgs['obj']['createApplication(address)void'] | BountyManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BountyManagerArgs['obj']['createApplication(address)void'] | BountyManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BountyManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BountyManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BountyManager smart contract
 */
export abstract class BountyManagerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BountyManagerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return BountyManagerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BountyManager smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BountyManagerArgs['obj']['createApplication(address)void'] | BountyManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.maintainerAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBounty(params: CallParams<BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.bountyConfig],
    }
  }
  /**
   * Constructs a no op call for the deleteBounty(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBounty(params: CallParams<BountyManagerArgs['obj']['deleteBounty(uint64)void'] | BountyManagerArgs['tuple']['deleteBounty(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteBounty(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.bountyId],
    }
  }
  /**
   * Constructs a no op call for the updateBounty()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateBounty(params: CallParams<BountyManagerArgs['obj']['updateBounty()void'] | BountyManagerArgs['tuple']['updateBounty()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateBounty()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BountyManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BountyManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BountyManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BountyManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BountyManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BountyManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BountyManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BountyManagerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BountyManagerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BountyManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BountyManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BountyManagerArgs['obj']['createApplication(address)void'] | BountyManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(BountyManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BountyManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BountyManagerArgs['obj']['createApplication(address)void'] | BountyManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(BountyManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BountyManager smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BountyManagerArgs['obj']['createApplication(address)void'] | BountyManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(BountyManagerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BountyManagerReturns['createApplication(address)void']) }, appClient: new BountyManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BountyManager smart contract
 */
export class BountyManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BountyManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BountyManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BountyManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BountyManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BountyManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BountyManagerClient> {
    return new BountyManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BountyManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BountyManagerClient> {
    return new BountyManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BountyManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BountyManager smart contract using the `createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBounty: (params: CallParams<BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BountyManagerParamsFactory.createBounty(params))
    },

    /**
     * Makes a call to the BountyManager smart contract using the `deleteBounty(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBounty: (params: CallParams<BountyManagerArgs['obj']['deleteBounty(uint64)void'] | BountyManagerArgs['tuple']['deleteBounty(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BountyManagerParamsFactory.deleteBounty(params))
    },

    /**
     * Makes a call to the BountyManager smart contract using the `updateBounty()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateBounty: (params: CallParams<BountyManagerArgs['obj']['updateBounty()void'] | BountyManagerArgs['tuple']['updateBounty()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BountyManagerParamsFactory.updateBounty(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BountyManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BountyManager smart contract using the `createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBounty: (params: CallParams<BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BountyManagerParamsFactory.createBounty(params))
    },

    /**
     * Makes a call to the BountyManager smart contract using the `deleteBounty(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBounty: (params: CallParams<BountyManagerArgs['obj']['deleteBounty(uint64)void'] | BountyManagerArgs['tuple']['deleteBounty(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BountyManagerParamsFactory.deleteBounty(params))
    },

    /**
     * Makes a call to the BountyManager smart contract using the `updateBounty()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateBounty: (params: CallParams<BountyManagerArgs['obj']['updateBounty()void'] | BountyManagerArgs['tuple']['updateBounty()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BountyManagerParamsFactory.updateBounty(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BountyManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BountyManager smart contract using the `createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBounty: async (params: CallParams<BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BountyManagerParamsFactory.createBounty(params))
      return {...result, return: result.return as unknown as (undefined | BountyManagerReturns['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the BountyManager smart contract using the `deleteBounty(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBounty: async (params: CallParams<BountyManagerArgs['obj']['deleteBounty(uint64)void'] | BountyManagerArgs['tuple']['deleteBounty(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BountyManagerParamsFactory.deleteBounty(params))
      return {...result, return: result.return as unknown as (undefined | BountyManagerReturns['deleteBounty(uint64)void'])}
    },

    /**
     * Makes a call to the BountyManager smart contract using the `updateBounty()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateBounty: async (params: CallParams<BountyManagerArgs['obj']['updateBounty()void'] | BountyManagerArgs['tuple']['updateBounty()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BountyManagerParamsFactory.updateBounty(params))
      return {...result, return: result.return as unknown as (undefined | BountyManagerReturns['updateBounty()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BountyManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BountyManager app
   */
  state = {
    /**
     * Methods to access global state for the current BountyManager app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          maintainerAddress: result.maintainerAddress,
          totalBounties: result.totalBounties,
          lastBountyId: result.lastBountyID,
        }
      },
      /**
       * Get the current value of the maintainerAddress key in global state
       */
      maintainerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maintainerAddress")) as string | undefined },
      /**
       * Get the current value of the totalBounties key in global state
       */
      totalBounties: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalBounties")) as bigint | undefined },
      /**
       * Get the current value of the lastBountyID key in global state
       */
      lastBountyId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastBountyID")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current BountyManager app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the allBountys map in box state
       */
      allBountys: {
        /**
         * Get all current values of the allBountys map in box state
         */
        getMap: async (): Promise<Map<bigint, BountyConfig>> => { return (await this.appClient.state.box.getMap("allBountys")) as Map<bigint, BountyConfig> },
        /**
         * Get a current value of the allBountys map by key from box state
         */
        value: async (key: bigint | number): Promise<BountyConfig | undefined> => { return await this.appClient.state.box.getMapValue("allBountys", key) as BountyConfig | undefined },
      },
    },
  }

  public newGroup(): BountyManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void method call against the BountyManager contract
       */
      createBounty(params: CallParams<BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBounty(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteBounty(uint64)void method call against the BountyManager contract
       */
      deleteBounty(params: CallParams<BountyManagerArgs['obj']['deleteBounty(uint64)void'] | BountyManagerArgs['tuple']['deleteBounty(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBounty(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateBounty()void method call against the BountyManager contract
       */
      updateBounty(params: CallParams<BountyManagerArgs['obj']['updateBounty()void'] | BountyManagerArgs['tuple']['updateBounty()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateBounty(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BountyManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BountyManagerComposer
  }
}
export type BountyManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBounty(params?: CallParams<BountyManagerArgs['obj']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | BountyManagerArgs['tuple']['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void']>): BountyManagerComposer<[...TReturns, BountyManagerReturns['createBounty((uint64,string,string,address,string,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the deleteBounty(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBounty(params?: CallParams<BountyManagerArgs['obj']['deleteBounty(uint64)void'] | BountyManagerArgs['tuple']['deleteBounty(uint64)void']>): BountyManagerComposer<[...TReturns, BountyManagerReturns['deleteBounty(uint64)void'] | undefined]>

  /**
   * Calls the updateBounty()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateBounty(params?: CallParams<BountyManagerArgs['obj']['updateBounty()void'] | BountyManagerArgs['tuple']['updateBounty()void']>): BountyManagerComposer<[...TReturns, BountyManagerReturns['updateBounty()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BountyManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BountyManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BountyManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BountyManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BountyManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BountyManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BountyManagerComposerResults<TReturns>>
}
export type BountyManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

