/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Bounty","desc":"","methods":[{"name":"createApplication","args":[{"name":"title","type":"string"},{"name":"cfid","type":"string"},{"name":"bountyOrganization","type":"string"},{"name":"expiryDate","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"depositReward","args":[{"name":"rewardTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setWinner","args":[{"name":"winner","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendReward","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":4,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"bountyTitle":{"key":"Ym91bnR5VGl0bGU=","keyType":"AVMBytes","valueType":"string"},"bountyCid":{"key":"Ym91bnR5Q2lk","keyType":"AVMBytes","valueType":"string"},"bountyOrganization":{"key":"Ym91bnR5T3JnYW5pemF0aW9u","keyType":"AVMBytes","valueType":"string"},"reward":{"key":"cmV3YXJk","keyType":"AVMBytes","valueType":"uint64"},"winner":{"key":"d2lubmVy","keyType":"AVMBytes","valueType":"address"},"expiryDate":{"key":"ZXhwaXJ5RGF0ZQ==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Bounty.algo.ts:4","pc":[0]},{"teal":2,"source":"contracts\\Bounty.algo.ts:4","pc":[1,2,3]},{"teal":3,"source":"contracts\\Bounty.algo.ts:4","pc":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]},{"teal":15,"source":"contracts\\Bounty.algo.ts:4","pc":[20,21]},{"teal":16,"source":"contracts\\Bounty.algo.ts:4","pc":[22]},{"teal":17,"source":"contracts\\Bounty.algo.ts:4","pc":[23,24]},{"teal":18,"source":"contracts\\Bounty.algo.ts:4","pc":[25]},{"teal":19,"source":"contracts\\Bounty.algo.ts:4","pc":[26,27]},{"teal":20,"source":"contracts\\Bounty.algo.ts:4","pc":[28]},{"teal":21,"source":"contracts\\Bounty.algo.ts:4","pc":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]},{"teal":25,"source":"contracts\\Bounty.algo.ts:4","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[55]},{"teal":30,"source":"contracts\\Bounty.algo.ts:15","pc":[56,57,58]},{"teal":31,"source":"contracts\\Bounty.algo.ts:15","pc":[59]},{"teal":34,"source":"contracts\\Bounty.algo.ts:15","pc":[60,61,62]},{"teal":35,"source":"contracts\\Bounty.algo.ts:15","pc":[63,64,65]},{"teal":38,"source":"contracts\\Bounty.algo.ts:15","pc":[66,67,68]},{"teal":39,"source":"contracts\\Bounty.algo.ts:15","pc":[69,70,71]},{"teal":42,"source":"contracts\\Bounty.algo.ts:15","pc":[72,73,74]},{"teal":43,"source":"contracts\\Bounty.algo.ts:15","pc":[75,76,77]},{"teal":46,"source":"contracts\\Bounty.algo.ts:15","pc":[78,79,80]},{"teal":47,"source":"contracts\\Bounty.algo.ts:15","pc":[81]},{"teal":48,"source":"contracts\\Bounty.algo.ts:15","pc":[82]},{"teal":52,"source":"contracts\\Bounty.algo.ts:15","pc":[83,84,85]},{"teal":56,"source":"contracts\\Bounty.algo.ts:18","pc":[86,87,88,89,90,91,92,93,94,95,96,97,98]},{"teal":57,"source":"contracts\\Bounty.algo.ts:18","pc":[99,100]},{"teal":58,"source":"contracts\\Bounty.algo.ts:18","pc":[101]},{"teal":59,"source":"contracts\\Bounty.algo.ts:18","pc":[102]},{"teal":60,"source":"contracts\\Bounty.algo.ts:18","pc":[103]},{"teal":61,"source":"contracts\\Bounty.algo.ts:18","pc":[104,105,106]},{"teal":62,"source":"contracts\\Bounty.algo.ts:18","pc":[107]},{"teal":63,"source":"contracts\\Bounty.algo.ts:18","pc":[108]},{"teal":64,"source":"contracts\\Bounty.algo.ts:18","pc":[109]},{"teal":68,"source":"contracts\\Bounty.algo.ts:19","pc":[110,111,112,113,114,115,116,117,118,119,120]},{"teal":69,"source":"contracts\\Bounty.algo.ts:19","pc":[121,122]},{"teal":70,"source":"contracts\\Bounty.algo.ts:19","pc":[123]},{"teal":71,"source":"contracts\\Bounty.algo.ts:19","pc":[124]},{"teal":72,"source":"contracts\\Bounty.algo.ts:19","pc":[125]},{"teal":73,"source":"contracts\\Bounty.algo.ts:19","pc":[126,127,128]},{"teal":74,"source":"contracts\\Bounty.algo.ts:19","pc":[129]},{"teal":75,"source":"contracts\\Bounty.algo.ts:19","pc":[130]},{"teal":76,"source":"contracts\\Bounty.algo.ts:19","pc":[131]},{"teal":80,"source":"contracts\\Bounty.algo.ts:20","pc":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151]},{"teal":81,"source":"contracts\\Bounty.algo.ts:20","pc":[152,153]},{"teal":82,"source":"contracts\\Bounty.algo.ts:20","pc":[154]},{"teal":83,"source":"contracts\\Bounty.algo.ts:20","pc":[155]},{"teal":84,"source":"contracts\\Bounty.algo.ts:20","pc":[156]},{"teal":85,"source":"contracts\\Bounty.algo.ts:20","pc":[157,158,159]},{"teal":86,"source":"contracts\\Bounty.algo.ts:20","pc":[160]},{"teal":87,"source":"contracts\\Bounty.algo.ts:20","pc":[161]},{"teal":88,"source":"contracts\\Bounty.algo.ts:20","pc":[162]},{"teal":92,"source":"contracts\\Bounty.algo.ts:21","pc":[163,164,165,166,167,168,169,170,171,172,173,174]},{"teal":93,"source":"contracts\\Bounty.algo.ts:21","pc":[175,176]},{"teal":94,"source":"contracts\\Bounty.algo.ts:21","pc":[177]},{"teal":95,"source":"contracts\\Bounty.algo.ts:15","pc":[178]},{"teal":100,"source":"contracts\\Bounty.algo.ts:27","pc":[179,180]},{"teal":101,"source":"contracts\\Bounty.algo.ts:27","pc":[181]},{"teal":102,"source":"contracts\\Bounty.algo.ts:27","pc":[182]},{"teal":103,"source":"contracts\\Bounty.algo.ts:27","pc":[183]},{"teal":104,"source":"contracts\\Bounty.algo.ts:27","pc":[184,185]},{"teal":105,"source":"contracts\\Bounty.algo.ts:27","pc":[186]},{"teal":106,"source":"contracts\\Bounty.algo.ts:27","pc":[187]},{"teal":109,"source":"contracts\\Bounty.algo.ts:27","errorMessage":"argument 0 (rewardTxn) for depositReward must be a pay transaction","pc":[188]},{"teal":112,"source":"contracts\\Bounty.algo.ts:27","pc":[189,190,191]},{"teal":113,"source":"contracts\\Bounty.algo.ts:27","pc":[192]},{"teal":114,"source":"contracts\\Bounty.algo.ts:27","pc":[193]},{"teal":118,"source":"contracts\\Bounty.algo.ts:27","pc":[194,195,196]},{"teal":124,"source":"contracts\\Bounty.algo.ts:30","pc":[197,198]},{"teal":125,"source":"contracts\\Bounty.algo.ts:30","pc":[199,200,201]},{"teal":126,"source":"contracts\\Bounty.algo.ts:30","pc":[202,203]},{"teal":127,"source":"contracts\\Bounty.algo.ts:30","pc":[204]},{"teal":128,"source":"contracts\\Bounty.algo.ts:30","pc":[205]},{"teal":129,"source":"contracts\\Bounty.algo.ts:29","pc":[206]},{"teal":137,"source":"contracts\\Bounty.algo.ts:37","pc":[207,208]},{"teal":138,"source":"contracts\\Bounty.algo.ts:39","pc":[209,210]},{"teal":139,"source":"contracts\\Bounty.algo.ts:39","pc":[211,212]},{"teal":140,"source":"contracts\\Bounty.algo.ts:39","pc":[213]},{"teal":143,"source":"contracts\\Bounty.algo.ts:39","errorMessage":"transaction verification failed: {\"txn\":\"rewardTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[214]},{"teal":147,"source":"contracts\\Bounty.algo.ts:42","pc":[215]},{"teal":148,"source":"contracts\\Bounty.algo.ts:42","pc":[216,217]},{"teal":149,"source":"contracts\\Bounty.algo.ts:42","pc":[218,219]},{"teal":150,"source":"contracts\\Bounty.algo.ts:42","pc":[220]},{"teal":151,"source":"contracts\\Bounty.algo.ts:27","pc":[221]},{"teal":156,"source":"contracts\\Bounty.algo.ts:49","pc":[222,223,224]},{"teal":157,"source":"contracts\\Bounty.algo.ts:49","pc":[225]},{"teal":158,"source":"contracts\\Bounty.algo.ts:49","pc":[226]},{"teal":159,"source":"contracts\\Bounty.algo.ts:49","pc":[227,228]},{"teal":160,"source":"contracts\\Bounty.algo.ts:49","pc":[229]},{"teal":163,"source":"contracts\\Bounty.algo.ts:49","errorMessage":"argument 0 (winner) for setWinner must be a address","pc":[230]},{"teal":166,"source":"contracts\\Bounty.algo.ts:49","pc":[231,232,233]},{"teal":167,"source":"contracts\\Bounty.algo.ts:49","pc":[234]},{"teal":168,"source":"contracts\\Bounty.algo.ts:49","pc":[235]},{"teal":172,"source":"contracts\\Bounty.algo.ts:49","pc":[236,237,238]},{"teal":178,"source":"contracts\\Bounty.algo.ts:52","pc":[239,240]},{"teal":179,"source":"contracts\\Bounty.algo.ts:52","pc":[241,242,243]},{"teal":180,"source":"contracts\\Bounty.algo.ts:52","pc":[244,245]},{"teal":181,"source":"contracts\\Bounty.algo.ts:52","pc":[246]},{"teal":182,"source":"contracts\\Bounty.algo.ts:52","pc":[247]},{"teal":183,"source":"contracts\\Bounty.algo.ts:51","pc":[248]},{"teal":187,"source":"contracts\\Bounty.algo.ts:55","pc":[249]},{"teal":188,"source":"contracts\\Bounty.algo.ts:55","pc":[250,251]},{"teal":189,"source":"contracts\\Bounty.algo.ts:55","pc":[252]},{"teal":190,"source":"contracts\\Bounty.algo.ts:49","pc":[253]},{"teal":195,"source":"contracts\\Bounty.algo.ts:60","pc":[254,255,256]},{"teal":196,"source":"contracts\\Bounty.algo.ts:60","pc":[257]},{"teal":197,"source":"contracts\\Bounty.algo.ts:60","pc":[258]},{"teal":201,"source":"contracts\\Bounty.algo.ts:60","pc":[259,260,261]},{"teal":207,"source":"contracts\\Bounty.algo.ts:63","pc":[262,263]},{"teal":208,"source":"contracts\\Bounty.algo.ts:63","pc":[264,265,266]},{"teal":209,"source":"contracts\\Bounty.algo.ts:63","pc":[267,268]},{"teal":210,"source":"contracts\\Bounty.algo.ts:63","pc":[269]},{"teal":211,"source":"contracts\\Bounty.algo.ts:63","pc":[270]},{"teal":212,"source":"contracts\\Bounty.algo.ts:62","pc":[271]},{"teal":219,"source":"contracts\\Bounty.algo.ts:66","pc":[272]},{"teal":220,"source":"contracts\\Bounty.algo.ts:66","pc":[273]},{"teal":221,"source":"contracts\\Bounty.algo.ts:66","pc":[274,275]},{"teal":225,"source":"contracts\\Bounty.algo.ts:67","pc":[276]},{"teal":226,"source":"contracts\\Bounty.algo.ts:67","pc":[277]},{"teal":227,"source":"contracts\\Bounty.algo.ts:67","pc":[278,279]},{"teal":231,"source":"contracts\\Bounty.algo.ts:68","pc":[280]},{"teal":232,"source":"contracts\\Bounty.algo.ts:68","pc":[281]},{"teal":233,"source":"contracts\\Bounty.algo.ts:68","pc":[282,283]},{"teal":236,"source":"contracts\\Bounty.algo.ts:66","pc":[284,285]},{"teal":237,"source":"contracts\\Bounty.algo.ts:66","pc":[286,287]},{"teal":240,"source":"contracts\\Bounty.algo.ts:66","pc":[288]},{"teal":241,"source":"contracts\\Bounty.algo.ts:60","pc":[289]},{"teal":244,"source":"contracts\\Bounty.algo.ts:4","pc":[290,291,292,293,294,295]},{"teal":245,"source":"contracts\\Bounty.algo.ts:4","pc":[296,297,298]},{"teal":246,"source":"contracts\\Bounty.algo.ts:4","pc":[299,300,301,302]},{"teal":249,"source":"contracts\\Bounty.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[303]},{"teal":252,"source":"contracts\\Bounty.algo.ts:4","pc":[304,305,306,307,308,309]},{"teal":253,"source":"contracts\\Bounty.algo.ts:4","pc":[310,311,312,313,314,315]},{"teal":254,"source":"contracts\\Bounty.algo.ts:4","pc":[316,317,318,319,320,321]},{"teal":255,"source":"contracts\\Bounty.algo.ts:4","pc":[322,323,324]},{"teal":256,"source":"contracts\\Bounty.algo.ts:4","pc":[325,326,327,328,329,330,331,332]},{"teal":259,"source":"contracts\\Bounty.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[333]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHg3MjY1Nzc2MTcyNjQgMHg3NzY5NmU2ZTY1NzIKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjMKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhwaXJ5RGF0ZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gYm91bnR5T3JnYW5pemF0aW9uOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gY2ZpZDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHRpdGxlOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24odGl0bGU6IHN0cmluZywgY2ZpZDogc3RyaW5nLCBib3VudHlPcmdhbml6YXRpb246IHN0cmluZywgZXhwaXJ5RGF0ZSA6IHVpbnQ2NCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byA0IDAKCgkvLyBjb250cmFjdHNcQm91bnR5LmFsZ28udHM6MTgKCS8vIHRoaXMuYm91bnR5VGl0bGUudmFsdWUgPSB0aXRsZQoJcHVzaGJ5dGVzIDB4NjI2Zjc1NmU3NDc5NTQ2OTc0NmM2NSAvLyAiYm91bnR5VGl0bGUiCglmcmFtZV9kaWcgLTEgLy8gdGl0bGU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEJvdW50eS5hbGdvLnRzOjE5CgkvLyB0aGlzLmJvdW50eUNpZC52YWx1ZSA9IGNmaWQKCXB1c2hieXRlcyAweDYyNmY3NTZlNzQ3OTQzNjk2NCAvLyAiYm91bnR5Q2lkIgoJZnJhbWVfZGlnIC0yIC8vIGNmaWQ6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEJvdW50eS5hbGdvLnRzOjIwCgkvLyB0aGlzLmJvdW50eU9yZ2FuaXphdGlvbi52YWx1ZSA9IGJvdW50eU9yZ2FuaXphdGlvbgoJcHVzaGJ5dGVzIDB4NjI2Zjc1NmU3NDc5NGY3MjY3NjE2ZTY5N2E2MTc0Njk2ZjZlIC8vICJib3VudHlPcmdhbml6YXRpb24iCglmcmFtZV9kaWcgLTMgLy8gYm91bnR5T3JnYW5pemF0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xCb3VudHkuYWxnby50czoyMQoJLy8gdGhpcy5leHBpcnlEYXRlLnZhbHVlID0gZXhwaXJ5RGF0ZQoJcHVzaGJ5dGVzIDB4NjU3ODcwNjk3Mjc5NDQ2MTc0NjUgLy8gImV4cGlyeURhdGUiCglmcmFtZV9kaWcgLTQgLy8gZXhwaXJ5RGF0ZTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkZXBvc2l0UmV3YXJkKHBheSl2b2lkCiphYmlfcm91dGVfZGVwb3NpdFJld2FyZDoKCS8vIHJld2FyZFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKHJld2FyZFR4bikgZm9yIGRlcG9zaXRSZXdhcmQgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBkZXBvc2l0UmV3YXJkKHBheSl2b2lkCgljYWxsc3ViIGRlcG9zaXRSZXdhcmQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRlcG9zaXRSZXdhcmQocmV3YXJkVHhuOiBQYXlUeG4pOiB2b2lkCmRlcG9zaXRSZXdhcmQ6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQm91bnR5LmFsZ28udHM6MjkKCS8vIGFzc2VydCgKCS8vICAgICB0aGlzLnR4bi5zZW5kZXIgPT0gdGhpcy5hcHAuY3JlYXRvcgoJLy8gKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJvdW50eS5hbGdvLnRzOjM3CgkvLyB2ZXJpZnlQYXlUeG4ocmV3YXJkVHhuLAoJLy8gICAgIHsKCS8vICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkVHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJvdW50eS5hbGdvLnRzOjQyCgkvLyB0aGlzLnJld2FyZC52YWx1ZSA9IHJld2FyZFR4bi5hbW91bnQKCWJ5dGVjIDAgLy8gICJyZXdhcmQiCglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0V2lubmVyKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3NldFdpbm5lcjoKCS8vIHdpbm5lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAod2lubmVyKSBmb3Igc2V0V2lubmVyIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIHNldFdpbm5lcihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgc2V0V2lubmVyCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzZXRXaW5uZXIod2lubmVyOiBBZGRyZXNzKTogdm9pZApzZXRXaW5uZXI6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQm91bnR5LmFsZ28udHM6NTEKCS8vIGFzc2VydCgKCS8vICAgICAgICAgdGhpcy50eG4uc2VuZGVyID09IHRoaXMuYXBwLmNyZWF0b3IKCS8vICAgICApCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQm91bnR5LmFsZ28udHM6NTUKCS8vIHRoaXMud2lubmVyLnZhbHVlPSB3aW5uZXIKCWJ5dGVjIDEgLy8gICJ3aW5uZXIiCglmcmFtZV9kaWcgLTEgLy8gd2lubmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZW5kUmV3YXJkKCl2b2lkCiphYmlfcm91dGVfc2VuZFJld2FyZDoKCS8vIGV4ZWN1dGUgc2VuZFJld2FyZCgpdm9pZAoJY2FsbHN1YiBzZW5kUmV3YXJkCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzZW5kUmV3YXJkKCk6IHZvaWQKc2VuZFJld2FyZDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xCb3VudHkuYWxnby50czo2MgoJLy8gYXNzZXJ0KAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIgPT0gdGhpcy5hcHAuY3JlYXRvcgoJLy8gICAgICkKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCb3VudHkuYWxnby50czo2NgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICByZWNlaXZlcjogdGhpcy53aW5uZXIudmFsdWUsCgkvLyAgICAgICAgIGFtb3VudDogdGhpcy5yZXdhcmQudmFsdWUsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQm91bnR5LmFsZ28udHM6NjcKCS8vIHJlY2VpdmVyOiB0aGlzLndpbm5lci52YWx1ZQoJYnl0ZWMgMSAvLyAgIndpbm5lciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXEJvdW50eS5hbGdvLnRzOjY4CgkvLyBhbW91bnQ6IHRoaXMucmV3YXJkLnZhbHVlCglieXRlYyAwIC8vICAicmV3YXJkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJcHVzaGludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4YTU4MjQ5NTQgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweGJlNGYxZTRiIC8vIG1ldGhvZCAiZGVwb3NpdFJld2FyZChwYXkpdm9pZCIKCXB1c2hieXRlcyAweDE5OTFmM2M0IC8vIG1ldGhvZCAic2V0V2lubmVyKGFkZHJlc3Mpdm9pZCIKCXB1c2hieXRlcyAweDdmMTgxMWRiIC8vIG1ldGhvZCAic2VuZFJld2FyZCgpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZGVwb3NpdFJld2FyZCAqYWJpX3JvdXRlX3NldFdpbm5lciAqYWJpX3JvdXRlX3NlbmRSZXdhcmQKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiABASYCBnJld2FyZAZ3aW5uZXIxGBSBBgsxGQiNDAD5AAAAAAAAAAAAAADrAAAAAAAAAAAAAAA2GgQXNhoDVwIANhoCVwIANhoBVwIAiAACIkOKBACAC2JvdW50eVRpdGxli/9JFRZXBgJMUGeACWJvdW50eUNpZIv+SRUWVwYCTFBngBJib3VudHlPcmdhbml6YXRpb26L/UkVFlcGAkxQZ4AKZXhwaXJ5RGF0ZYv8Z4kxFiIJSTgQIhJEiAACIkOKAQAxADYyAHIHSBJEi/84BzIKEkQoi/84CGeJNhoBSRWBIBJEiAACIkOKAQAxADYyAHIHSBJEKYv/Z4mIAAIiQ4oAADEANjIAcgdIEkSxIrIQKWSyByhksgiBALIBs4mABKWCSVQ2GgCOAf8JAIAEvk8eS4AEGZHzxIAEfxgR2zYaAI4D/2b/kf+xAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Bounty contract
 */
export type BountyArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string,string,string,uint64)void': {
      title: string
      cfid: string
      bountyOrganization: string
      expiryDate: bigint | number
    }
    'depositReward(pay)void': {
      rewardTxn: AppMethodCallTransactionArgument
    }
    'setWinner(address)void': {
      winner: string
    }
    'sendReward()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string,string,string,uint64)void': [title: string, cfid: string, bountyOrganization: string, expiryDate: bigint | number]
    'depositReward(pay)void': [rewardTxn: AppMethodCallTransactionArgument]
    'setWinner(address)void': [winner: string]
    'sendReward()void': []
  }
}

/**
 * The return type for each method
 */
export type BountyReturns = {
  'createApplication(string,string,string,uint64)void': void
  'depositReward(pay)void': void
  'setWinner(address)void': void
  'sendReward()void': void
}

/**
 * Defines the types of available calls and state of the Bounty smart contract.
 */
export type BountyTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,string,uint64)void' | 'createApplication', {
      argsObj: BountyArgs['obj']['createApplication(string,string,string,uint64)void']
      argsTuple: BountyArgs['tuple']['createApplication(string,string,string,uint64)void']
      returns: BountyReturns['createApplication(string,string,string,uint64)void']
    }>
    & Record<'depositReward(pay)void' | 'depositReward', {
      argsObj: BountyArgs['obj']['depositReward(pay)void']
      argsTuple: BountyArgs['tuple']['depositReward(pay)void']
      returns: BountyReturns['depositReward(pay)void']
    }>
    & Record<'setWinner(address)void' | 'setWinner', {
      argsObj: BountyArgs['obj']['setWinner(address)void']
      argsTuple: BountyArgs['tuple']['setWinner(address)void']
      returns: BountyReturns['setWinner(address)void']
    }>
    & Record<'sendReward()void' | 'sendReward', {
      argsObj: BountyArgs['obj']['sendReward()void']
      argsTuple: BountyArgs['tuple']['sendReward()void']
      returns: BountyReturns['sendReward()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bountyTitle: string
        bountyCid: string
        bountyOrganization: string
        reward: bigint
        winner: string
        expiryDate: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BountySignatures = keyof BountyTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BountyNonVoidMethodSignatures = keyof BountyTypes['methods'] extends infer T ? T extends keyof BountyTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Bounty smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BountySignatures> = BountyTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Bounty smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BountySignatures> = BountyTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BountyTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BountyCreateCallParams =
  | Expand<CallParams<BountyArgs['obj']['createApplication(string,string,string,uint64)void'] | BountyArgs['tuple']['createApplication(string,string,string,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BountyArgs['obj']['createApplication(string,string,string,uint64)void'] | BountyArgs['tuple']['createApplication(string,string,string,uint64)void']> & {method: 'createApplication(string,string,string,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BountyDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BountyCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Bounty smart contract
 */
export abstract class BountyParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BountyCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string,string,string,uint64)void':
            return BountyParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Bounty smart contract using the createApplication(string,string,string,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BountyArgs['obj']['createApplication(string,string,string,uint64)void'] | BountyArgs['tuple']['createApplication(string,string,string,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string,string,string,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.title, params.args.cfid, params.args.bountyOrganization, params.args.expiryDate],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the depositReward(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositReward(params: CallParams<BountyArgs['obj']['depositReward(pay)void'] | BountyArgs['tuple']['depositReward(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositReward(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardTxn],
    }
  }
  /**
   * Constructs a no op call for the setWinner(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setWinner(params: CallParams<BountyArgs['obj']['setWinner(address)void'] | BountyArgs['tuple']['setWinner(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setWinner(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.winner],
    }
  }
  /**
   * Constructs a no op call for the sendReward()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendReward(params: CallParams<BountyArgs['obj']['sendReward()void'] | BountyArgs['tuple']['sendReward()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendReward()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Bounty smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BountyFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BountyFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BountyClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BountyClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Bounty smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BountyDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BountyParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BountyCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BountyClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bounty smart contract using the createApplication(string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BountyArgs['obj']['createApplication(string,string,string,uint64)void'] | BountyArgs['tuple']['createApplication(string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(BountyParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bounty smart contract using the createApplication(string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BountyArgs['obj']['createApplication(string,string,string,uint64)void'] | BountyArgs['tuple']['createApplication(string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(BountyParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bounty smart contract using an ABI method call using the createApplication(string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BountyArgs['obj']['createApplication(string,string,string,uint64)void'] | BountyArgs['tuple']['createApplication(string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(BountyParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BountyReturns['createApplication(string,string,string,uint64)void']) }, appClient: new BountyClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Bounty smart contract
 */
export class BountyClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BountyClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Bounty app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BountyClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BountyNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BountyClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BountyClient> {
    return new BountyClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BountyClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BountyClient> {
    return new BountyClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Bounty smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Bounty smart contract using the `depositReward(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositReward: (params: CallParams<BountyArgs['obj']['depositReward(pay)void'] | BountyArgs['tuple']['depositReward(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BountyParamsFactory.depositReward(params))
    },

    /**
     * Makes a call to the Bounty smart contract using the `setWinner(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setWinner: (params: CallParams<BountyArgs['obj']['setWinner(address)void'] | BountyArgs['tuple']['setWinner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BountyParamsFactory.setWinner(params))
    },

    /**
     * Makes a call to the Bounty smart contract using the `sendReward()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendReward: (params: CallParams<BountyArgs['obj']['sendReward()void'] | BountyArgs['tuple']['sendReward()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BountyParamsFactory.sendReward(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Bounty smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Bounty smart contract using the `depositReward(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositReward: (params: CallParams<BountyArgs['obj']['depositReward(pay)void'] | BountyArgs['tuple']['depositReward(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BountyParamsFactory.depositReward(params))
    },

    /**
     * Makes a call to the Bounty smart contract using the `setWinner(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setWinner: (params: CallParams<BountyArgs['obj']['setWinner(address)void'] | BountyArgs['tuple']['setWinner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BountyParamsFactory.setWinner(params))
    },

    /**
     * Makes a call to the Bounty smart contract using the `sendReward()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendReward: (params: CallParams<BountyArgs['obj']['sendReward()void'] | BountyArgs['tuple']['sendReward()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BountyParamsFactory.sendReward(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Bounty smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Bounty smart contract using the `depositReward(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositReward: async (params: CallParams<BountyArgs['obj']['depositReward(pay)void'] | BountyArgs['tuple']['depositReward(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BountyParamsFactory.depositReward(params))
      return {...result, return: result.return as unknown as (undefined | BountyReturns['depositReward(pay)void'])}
    },

    /**
     * Makes a call to the Bounty smart contract using the `setWinner(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setWinner: async (params: CallParams<BountyArgs['obj']['setWinner(address)void'] | BountyArgs['tuple']['setWinner(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BountyParamsFactory.setWinner(params))
      return {...result, return: result.return as unknown as (undefined | BountyReturns['setWinner(address)void'])}
    },

    /**
     * Makes a call to the Bounty smart contract using the `sendReward()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendReward: async (params: CallParams<BountyArgs['obj']['sendReward()void'] | BountyArgs['tuple']['sendReward()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BountyParamsFactory.sendReward(params))
      return {...result, return: result.return as unknown as (undefined | BountyReturns['sendReward()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BountyClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Bounty app
   */
  state = {
    /**
     * Methods to access global state for the current Bounty app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bountyTitle: result.bountyTitle,
          bountyCid: result.bountyCid,
          bountyOrganization: result.bountyOrganization,
          reward: result.reward,
          winner: result.winner,
          expiryDate: result.expiryDate,
        }
      },
      /**
       * Get the current value of the bountyTitle key in global state
       */
      bountyTitle: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("bountyTitle")) as string | undefined },
      /**
       * Get the current value of the bountyCid key in global state
       */
      bountyCid: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("bountyCid")) as string | undefined },
      /**
       * Get the current value of the bountyOrganization key in global state
       */
      bountyOrganization: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("bountyOrganization")) as string | undefined },
      /**
       * Get the current value of the reward key in global state
       */
      reward: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reward")) as bigint | undefined },
      /**
       * Get the current value of the winner key in global state
       */
      winner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("winner")) as string | undefined },
      /**
       * Get the current value of the expiryDate key in global state
       */
      expiryDate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("expiryDate")) as bigint | undefined },
    },
  }

  public newGroup(): BountyComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a depositReward(pay)void method call against the Bounty contract
       */
      depositReward(params: CallParams<BountyArgs['obj']['depositReward(pay)void'] | BountyArgs['tuple']['depositReward(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositReward(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setWinner(address)void method call against the Bounty contract
       */
      setWinner(params: CallParams<BountyArgs['obj']['setWinner(address)void'] | BountyArgs['tuple']['setWinner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setWinner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendReward()void method call against the Bounty contract
       */
      sendReward(params: CallParams<BountyArgs['obj']['sendReward()void'] | BountyArgs['tuple']['sendReward()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendReward(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Bounty contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BountyComposer
  }
}
export type BountyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the depositReward(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositReward(params?: CallParams<BountyArgs['obj']['depositReward(pay)void'] | BountyArgs['tuple']['depositReward(pay)void']>): BountyComposer<[...TReturns, BountyReturns['depositReward(pay)void'] | undefined]>

  /**
   * Calls the setWinner(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setWinner(params?: CallParams<BountyArgs['obj']['setWinner(address)void'] | BountyArgs['tuple']['setWinner(address)void']>): BountyComposer<[...TReturns, BountyReturns['setWinner(address)void'] | undefined]>

  /**
   * Calls the sendReward()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendReward(params?: CallParams<BountyArgs['obj']['sendReward()void'] | BountyArgs['tuple']['sendReward()void']>): BountyComposer<[...TReturns, BountyReturns['sendReward()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Bounty smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BountyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BountyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BountyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BountyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BountyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BountyComposerResults<TReturns>>
}
export type BountyComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

